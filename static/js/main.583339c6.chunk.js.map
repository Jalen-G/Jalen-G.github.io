{"version":3,"sources":["logo.svg","Jalen_Goodloe_Resume.pdf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","id","src","logo","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","resume","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,iBCA3CD,EAAOC,QAAU,IAA0B,kD,+MCuD5BC,MAjDf,WACC,OACC,kBAAC,IAAD,CAAUC,UAAU,aACnB,yBAAKA,UAAU,wDACd,2BAAOC,GAAG,OAAOC,IAAKC,MACtB,4BACCH,UAAU,2BACVI,KAAK,SACLC,cAAY,WACZC,cAAY,oBACZC,gBAAc,mBACdC,gBAAc,QACdC,aAAW,qBACX,uBAAGT,UAAU,wBAAb,WAED,yBAAKA,UAAU,2BAA2BC,GAAG,oBAC5C,wBAAID,UAAU,mCACb,wBAAIA,UAAU,YACb,uBAAGA,UAAU,WAAWU,KAAMC,IAAQC,OAAO,sBAA7C,iBAID,wBAAIZ,UAAU,YACb,uBACCA,UAAU,WACVU,KAAK,iCACLE,OAAO,sBAHR,SAOD,wBAAIZ,UAAU,YACb,uBAAGA,UAAU,WAAWU,KAAK,oCAA7B,eAOJ,yBAAKV,UAAU,kCACd,4BACC,0BAAMA,UAAU,QAAhB,cACA,0BAAMA,UAAU,QAAhB,cAED,qDCrCgBa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.583339c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.da1fb5f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/Jalen_Goodloe_Resume.263fb937.pdf\";","import React from 'react';\nimport './App.css';\nimport logo from './logo.svg';\nimport Div100vh from 'react-div-100vh';\nimport resume from './Jalen_Goodloe_Resume.pdf';\n\nfunction App() {\n\treturn (\n\t\t<Div100vh className='container'>\n\t\t\t<nav className='navbar navbar-expand-sm navbar-light slide-in-bottom'>\n\t\t\t\t<embed id='logo' src={logo} />\n\t\t\t\t<button\n\t\t\t\t\tclassName='navbar-toggler d-lg-none'\n\t\t\t\t\ttype='button'\n\t\t\t\t\tdata-toggle='collapse'\n\t\t\t\t\tdata-target='#collapsibleNavId'\n\t\t\t\t\taria-controls='collapsibleNavId'\n\t\t\t\t\taria-expanded='false'\n\t\t\t\t\taria-label='Toggle navigation'>\n\t\t\t\t\t<i className='material-icons md-48'>dehaze</i>\n\t\t\t\t</button>\n\t\t\t\t<div className='collapse navbar-collapse' id='collapsibleNavId'>\n\t\t\t\t\t<ul className='navbar-nav mt-2 mt-lg-0 ml-auto'>\n\t\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t\t<a className='nav-link' href={resume} target='”_blank”'>\n\t\t\t\t\t\t\t\tRésumé\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\tclassName='nav-link'\n\t\t\t\t\t\t\t\thref='https://www.github.com/jalen-g'\n\t\t\t\t\t\t\t\ttarget='”_blank”'>\n\t\t\t\t\t\t\t\tWork\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li className='nav-item'>\n\t\t\t\t\t\t\t<a className='nav-link' href='mailto: goodloejalen@outlook.com'>\n\t\t\t\t\t\t\t\tContact\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t\t<div className='main-text slide-in-bottom-text'>\n\t\t\t\t<h1>\n\t\t\t\t\t<span className='line'>Hello!&nbsp;</span>\n\t\t\t\t\t<span className='line'>I'm Jalen</span>\n\t\t\t\t</h1>\n\t\t\t\t<p>Student & Developer</p>\n\t\t\t</div>\n\t\t</Div100vh>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}